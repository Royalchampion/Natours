.row {
    /*1. We have chosen max-width over width bcoz no matter how much size we reduce of google chrome, It'll always show a fixed width(max-width) of the row.*/ 
    max-width: $grid-width;

    /*We can assign row(A block element) to the center position using this strategy*/ 
    margin: 0 auto;

    /*Every child except the last one*/ 
    &:not(:last-child) {
        /*Here, We've defined horizontal gutter.*/ 
        margin-bottom: $gutter-vertical;

        @include respond(tab-port) {
            margin-bottom: $gutter-vertical-small;
        }
    }

    @include respond(tab-port) {
        max-width: 50rem;
        padding: 0 3rem;
    }

    /*2. Since, we are using float: left property, the height of the row collapses. So, we'll use this clearfix hack.*/ 
    @include clearfix;

    // '^=' : Starts with
    // '*=' : Contains
    // '$=' : Ends with 
    [class^='col-'] {
        float: left;

        &:not(:last-child) {
            margin-right: $gutter-horizontal;

            @include respond(tab-port) {
                margin-right: 0;
                margin-bottom: $gutter-vertical-small;
            }
        }

        // Here, we give each individual columns their specific width. So we get it in order.
        @include respond(tab-port) {
            width: 100% !important;
        }
    }

    .col-1-of-2 {
        width: calc((100% - #{$gutter-horizontal}) / 2);
    }

    .col-1-of-3 {
        width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
    }

    .col-2-of-3 {
        width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
    }

    .col-1-of-4 {
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
    }

    .col-2-of-4 {
        width: calc((2 * (100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
    }

    .col-3-of-4 {
        width: calc((3 * (100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
    }
}