/*
    0 - 600px : Phone
    600px - 900px : Tablet Portrait
    900px - 1200px : Tablet Landscape
    1200px - 1800px : Normal styles applied for desktop
    1800px + : Big Desktop
*/
/*
$breakpoint arguement choices
- phone
- tab-port
- tab-land
- big-desktop
*/
/* The order in which we write media query : Base > Typography > General layout > Grid > Page layout > Component */
/*This is how we write animations*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(10rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

/* This is the universal change we make in CSS. What it does is that it sets the whole margin and padding back to zero to start from the beginning. Also we do set the box-shadow to box-model which neglects the margin and padding from the height and width of the box-model. Thus, makes our task easier.*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  /*Always remember that Google chrome default font-size is 16px. But, we want it to be 10px and we also want to keep it into percentage value bcoz we don't want to override default value set by the user.*/
  font-size: 62.5%; }
  @media (min-width: 112.5em) {
    html {
      font-size: 75%; } }
  @media (max-width: 75em) {
    html {
      font-size: 56.25%; } }
  @media (max-width: 56.25em) {
    html {
      font-size: 50%; } }

body {
  box-sizing: border-box;
  /*Setting up the padding of the entire body as a 3rem creates the white body around the whole border.*/
  padding: 3rem; }
  @media (max-width: 56.25em) {
    body {
      padding: 0; } }

body {
  /*In case you're wondering why have we used font-weight as 400, Always remember that we have used the google fonts with different font-weight. 400 is one of them.*/
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /*We also have used backface-visibility: hidden; property in order to overcome the issue of shacking which occurs whenever we do use the animations.*/
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /*This is how we present animations. Now take a look at line no.40 of typography.scss*/
    animation-name: moveInLeft;
    animation-duration: 1.5s;
    animation-timing-function: ease;
    /* animation-delay: 1s; 
           animation-iteration-count: 3;*/ }
    @media (max-width: 37.5em) {
      .heading-primary--main {
        letter-spacing: 1rem;
        font-size: 5rem; } }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.2rem;
    animation: moveInRight 1.5s ease; }
    @media (max-width: 37.5em) {
      .heading-primary--sub {
        letter-spacing: 0.5rem; } }

.heading-secondary {
  /*2. The first three properties are the basic setup for the heading font.*/
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  /*3. Now we do set the background property of the heading. Since, this is the block element, it covers the whole width of the section.*/
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  /*4. So, We do set it as an inline-block. Now it covers only the essential part. The rest two property helps to show the background color as a text-color.*/
  display: inline-block;
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 0.2rem;
  transition: all 0.2s;
  /*5. We do set the hover effect.*/ }
  @media (max-width: 56.25em) {
    .heading-secondary {
      font-size: 3rem; } }
  @media (max-width: 37.5em) {
    .heading-secondary {
      font-size: 2.5rem; } }
  .heading-secondary:hover {
    /*After translate and scale, skew is the third animation property we're seeing.*/
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

/*6. We do set the heading tertiary with these basic commands.*/
.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

/*Now, Refer composition.scss*/
.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }
  @media (max-width: 56.25em) {
    .u-margin-bottom-big {
      margin-bottom: 5rem; } }

.u-margin-bottom-medium {
  margin-bottom: 4rem !important; }
  @media (max-width: 56.25em) {
    .u-margin-bottom-medium {
      margin-bottom: 3rem; } }

.u-margin-bottom-small {
  margin-bottom: 2rem; }

.u-margin-top-big {
  margin-top: 8rem; }

/*Link, visited, active and hover(and many more), these are known as pseudo classes. pseudo classes are nothing but the special cases of html selectors.*/
.btn {
  /*Hover means we are hovering over the button.*/
  /*active means we have clicked the button.*/
  /*after and before are the pseudo elements. */ }
  .btn, .btn:link, .btn:visited {
    /*The first three properties convert the normal link to a button. Although, there is no space between these two element.So, We'll use display: inline-block; property to bring some space between these two elements.(Always use this strategy whenever you want to bring some space between two elements.)*/
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem;
    border: none;
    cursor: pointer; }
  .btn:hover {
    /*We do set the transform: translateY(-0.3rem); So, Whenever we hover over the button, it turns itself up.*/
    transform: translateY(-0.3rem);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /*Since we want some action just after we do hover over the main element with .btn class.*/
    /*Don't forget to refer .btn::after at line number 64.*/ }
    .btn:hover::after {
      /*Using scale as a transform property enhances the button as long as we hover over it.*/
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active, .btn:focus {
    outline: none;
    /*transform: translateY(-0.1rem); means whenever we click on the button, It's turning itself down.*/
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #55c57a; }
  .btn::after {
    /*In such cases, we set the content as ""*/
    content: "";
    /*display should be inline-block bcoz the parent elements like .btn is also an inline-block.*/
    display: inline-block;
    /*:after pseudo elements is treated as a child element. So, we do set the height and width 100% so the pseudo elements shall have the same dimension as its parent element.(Take a look at line number 13)*/
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /*But, it appears below the main button. In order to move it behind the main button, we do set the below property and we do also set the display property as relative in its parent element i.e. element with .btn class*/
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s; }
  .btn--animated {
    /*We're using this property so the animated button appears on the screen.*/
    animation: moveInBottom .5s ease-out .75s;
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #7ed56f;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #7ed56f;
  padding: 3px; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translate(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translate(0); }

.composition {
  position: relative;
  /*9. Whenever we hover over the image, the other two images go backwards.*/ }
  .composition__photo {
    /*7. The first four properties are the basic setup properties.*/
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all 0.2s;
    /*9. Now, there's a space between border and image.*/
    outline-offset: 2rem;
    /*Basic setup of images.*/
    /*8. We'll provide hover effect for each respective images.*/ }
    @media (max-width: 56.25em) {
      .composition__photo {
        float: left;
        position: relative;
        width: 33.33%;
        box-shadow: 0 1.5rem 3rem rgba(0, 0, 0, 0.2); } }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
      @media (max-width: 56.25em) {
        .composition__photo--p1 {
          top: 0;
          transform: scale(1.2); } }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
      @media (max-width: 56.25em) {
        .composition__photo--p2 {
          top: -1rem;
          transform: scale(1.3);
          z-index: 100; } }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
      @media (max-width: 56.25em) {
        .composition__photo--p3 {
          top: 1rem;
          left: 0;
          transform: scale(1.1); } }
    .composition__photo:hover {
      /*Even if we have provided the following properties, there's no space between the green border and the image. So, take a look at the line number 12.*/
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.9); }

.feature-box {
  /*2. Basic setup*/
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 0.3rem;
  transition: all 0.2s;
  /*4. Animations and now refer _home.scss again.*/ }
  @media (max-width: 56.25em) {
    .feature-box {
      padding: 2rem; } }
  .feature-box__icon {
    /*3. Basic setup*/
    font-size: 6rem;
    margin-bottom: 0.5rem;
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    color: transparent; }
    @media (max-width: 56.25em) {
      .feature-box__icon {
        margin-bottom: 0; } }
  .feature-box:hover {
    transform: translateY(-1rem); }

/*Phase 1 : From line number 1 to 60.*/
.card {
  /*4. We are writing perspective: 150rem property, so we can make it feel like it's coming out towards you whenever we hover over the card.*/
  perspective: 150rem;
  -moz-perspective: 150rem;
  /*Since, the height of the card collapses, so to get rid of that issue, we'll write another same height property and we'll also make this parent element's position relative.*/
  position: relative;
  height: 50rem;
  /*3. After writing hover effect, we write perspective for the very first parent element.
    But, Before that We'll also take care of the program line number 26 and 31*/
  /*9. Now, Use the below properties to style the detail elements.*/ }
  .card__side {
    /*2. First, We write the given below four properties as a basic setup.*/
    color: #fff;
    font-size: 2rem;
    height: 50rem;
    transition: all 0.8s;
    /*After that, we go on to line number 48.*/
    /*5. Using the below property we're gonna align both front-card and back-card align together.*/
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    border-radius: 0.3rem;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
    overflow: hidden; }
    .card__side--Front {
      background-color: #fff; }
    .card__side--Back {
      transform: rotateY(180deg); }
      .card__side--Back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--Back-2 {
        background-image: linear-gradient(to right bottom, #28b485, #55c57a); }
      .card__side--Back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--Front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--Back {
    transform: rotateY(0deg); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    /*We'll use the below both the properties only when we'll see that border property is not applied on the cards.*/ }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #28b485, #55c57a), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: #fff;
    /*We use the below properties to align respectively for the requirement.*/
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%;
    box-shadow: none; }
  .card__heading-span {
    /*8. We provided padding but still the padding isn't available everywhere.*/
    padding: 1rem 1.5rem;
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85));
      width: 60%; }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(40, 180, 133, 0.85), rgba(85, 197, 122, 0.85));
      width: 60%; }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85));
      width: 60%; }
  .card__details {
    padding: 3rem;
    box-shadow: none; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem;
        color: #000; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center;
    box-shadow: none; }
  .card__price-box {
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 10; }
  @media (max-width: 56.25em) {
    .card {
      height: auto;
      border-radius: 3px;
      background-color: #fff;
      box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
      .card__side {
        height: auto;
        position: relative;
        border-radius: 0.3rem;
        box-shadow: none; }
        .card__side--Back {
          transform: rotateY(0);
          clip-path: polygon(0 15%, 100% 0, 100% 100%, 0% 100%); }
      .card:hover .card__side--Front {
        transform: rotateY(0); }
      .card:hover .card__side--Back {
        transform: rotateY(0); }
      .card__cta {
        position: relative;
        top: 0%;
        left: 0%;
        transform: translate(0);
        width: 100%;
        padding-top: 4rem;
        padding-bottom: 4rem; }
      .card__price-box {
        margin-bottom: 8rem; }
      .card__price-only {
        font-size: 1.4rem;
        text-transform: uppercase; }
      .card__price-value {
        font-size: 6rem;
        font-weight: 10; } }

.story {
  /*1. First We'll write the basic property of the stoy container, from line 3 to 7.*/
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: 1.6rem;
  transform: skewX(-12deg);
  /*4. Now, We'll use the below property to make it visible.*/
  /*5. Now, We'll use the following property whenever we hover over the image.*/ }
  @media (max-width: 56.25em) {
    .story {
      width: 100%;
      padding: 4rem;
      padding-right: 1rem;
      /* padding-left: 7rem;*/ } }
  @media (max-width: 37.5em) {
    .story {
      transform: skewX(0); } }
  .story > * {
    transform: skewX(12deg); }
  .story__shape {
    /*2. Then we write the following properties as a second step.*/
    width: 15rem;
    height: 15rem;
    background-color: orangered;
    float: left;
    box-shadow: none;
    -webkit-shape-outside: circle(50% at 50% 50%);
    shape-outside: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
    transform: translateX(-3rem) skewX(12deg);
    position: relative;
    overflow: hidden; }
    @media (max-width: 37.5em) {
      .story__shape {
        transform: translateX(-3rem) skewX(0); } }
  .story__image {
    height: 100%;
    transform: translateX(-4rem) scale(1.5);
    backface-visibility: hidden;
    transition: all 0.5s; }
  .story__text {
    box-shadow: none; }
    @media (max-width: 37.5em) {
      .story__text {
        transform: skewX(0); } }
  .story__caption {
    /*3. Now, to make the text visible we're gonna use the below property from the line number 70 to 77.*/
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 40%);
    color: #fff;
    text-transform: uppercase;
    font-size: 1.7rem;
    text-align: center;
    /*First, the figure caption will be invisible as shown below in the properties.*/
    opacity: 0;
    transition: all 0.5s;
    /*We'll use this property to get rid of glitch.*/
    backface-visibility: hidden; }
  .story:hover .story__caption {
    opacity: 1;
    transform: translate(-50%, -50%); }
  .story:hover .story__image {
    transform: translateX(-4rem) scale(1.1);
    filter: blur(3px) brightness(80%);
    backface-visibility: hidden; }

.bg-video {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: -1;
  opacity: 0.15;
  overflow: hidden; }
  .bg-video__content {
    height: 100%;
    width: 100%;
    object-fit: cover; }

.form {
  border: none; }
  .form__group:not(:last-child) {
    margin-bottom: 2rem; }
  .form__input {
    /*1. First, We write the CSS properties from line 11 to 17.*/
    font-size: 1.5rem;
    font-family: inherit;
    color: inherit;
    padding: 1.5rem 2rem;
    border-radius: 2px;
    background-color: rgba(255, 255, 255, 0.5);
    border: none;
    font-family: inherit;
    border-bottom: 3px solid transparent;
    width: 65%;
    display: block;
    transition: all 0.3s; }
    @media (max-width: 56.25em) {
      .form__input {
        width: 60%; } }
    @media (max-width: 37.5em) {
      .form__input {
        width: 60%; } }
    .form__input:focus {
      outline: none;
      box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.1);
      border-bottom: 3px solid #55c57a; }
      .form__input:focus:invalid {
        border-bottom: 3px solid #ff7730; }
    .form__input::-webkit-input-placeholder {
      color: #999; }
  .form__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 2rem;
    margin-top: 0.7rem;
    display: block;
    transition: all 0.3s; }
  .form__input:placeholder-shown + .form__label {
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4rem); }
  .form__radio-group {
    width: 43.5%;
    display: inline-block; }
    @media (max-width: 56.25em) {
      .form__radio-group {
        width: 100%;
        margin-bottom: 2rem; } }
  .form__radio-input {
    display: none; }
  .form__radio-label {
    font-size: 1.6rem;
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem; }
    .form__radio-label:not(:last-child) {
      margin-right: 1.5rem; }
  .form__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid #7ed56f;
    border-radius: 50%;
    display: inline-block;
    position: absolute;
    left: 0;
    top: -0.7rem; }
    .form__radio-button::after {
      content: "";
      display: block;
      height: 2rem;
      width: 2rem;
      border-radius: 50%;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #7ed56f;
      opacity: 0;
      transition: opacity 0.2s; }
  .form__radio-input:checked ~ .form__radio-label .form__radio-button::after {
    opacity: 1; }

.popup {
  /*1. This is the basic setup we do at first(From line number 3 to 9)*/
  height: 100vh;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.8);
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s; }
  .popup__content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 75%;
    height: auto;
    background-color: #fff;
    box-shadow: 0 2rem 4rem rgba(0, 0, 0, 0.2);
    border-radius: 3px;
    display: table;
    overflow: hidden;
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.5);
    transition: all 0.4s 0.2s; }
  .popup__left {
    width: 33.33%;
    display: table-cell; }
  .popup__right {
    width: 66.67%;
    display: table-cell;
    vertical-align: middle;
    padding: 3rem 5rem; }
  .popup__img {
    display: block;
    width: 100%; }
  .popup__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;
    column-count: 2;
    column-gap: 4rem;
    column-rule: 1px solid #eee;
    -webkit-hyphens: auto;
    hyphens: auto; }
  .popup:target {
    opacity: 1;
    visibility: visible; }
  .popup:target .popup__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1); }
  .popup__close:link, .popup__close:visited {
    color: #777;
    position: absolute;
    top: 2.5rem;
    right: 2.5rem;
    font-size: 3rem;
    text-decoration: none;
    display: inline-block;
    transition: all 0.2s;
    line-height: 1; }
  .popup__close:hover {
    color: #7ed56f; }

.section-about {
  /*1. First two properties are the basic setup of the about section while the last one is covering the margin and solving the whitespace issue that occurs right above about section.(Now, refer typography in base folder.)*/
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
  @media (max-width: 56.25em) {
    .section-about {
      padding: 20rem 0; } }

/*1. The first three properties are the basic setup we apply to the section*/
.section-feature {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(40, 180, 133, 0.8), rgba(85, 197, 122, 0.8)), url(../img/nat-4.jpg);
  background-size: cover;
  /*Now refer to the feature-box section in components.
    5. To perform the skew transformation and cover the whitespace, we use the two below property.*/
  transform: skewY(-7deg);
  margin-top: -10rem;
  /*And finally perform the below code to undo all the changes we made in the previous operation*/ }
  .section-feature > * {
    transform: skewY(7deg); }

/*Basic Setup*/
.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0;
  padding-bottom: 10px;
  margin-top: -10rem; }
  @media (max-width: 56.25em) {
    .section-tours {
      padding: 20rem 0 10rem 0; } }

/*Basic Setup*/
.section-stories {
  padding: 15rem 0;
  position: relative; }
  @media (max-width: 56.25em) {
    .section-stories {
      padding: 10rem 0; } }

/*Basic Setup for form*/
.section-book {
  padding: 15rem;
  background-image: linear-gradient(to right bottom, #55c57a, #7ed56f); }

.book {
  background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 50%, transparent 50%), url(../img/nat-10.jpg);
  background-size: cover;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.2); }
  @media (max-width: 75em) {
    .book {
      background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 65%, transparent 65%), url(../img/nat-10.jpg); } }
  @media (max-width: 56.25em) {
    .book {
      background-image: linear-gradient(to right, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 100%, transparent 100%), url(../img/nat-10.jpg); } }
  .book__form {
    width: 50%;
    padding: 6rem; }
    @media (max-width: 75em) {
      .book__form {
        width: 65%; } }
    @media (max-width: 56.25em) {
      .book__form {
        width: 100%; } }

.header {
  /*Using height as 95vh means that header element is covering the total of 95% of the viewport.*/
  height: 95vh;
  /*To use image as a background image in your element, we do use background-image() and background-size:cover properties.*/
  background-image: linear-gradient(to right bottom, rgba(40, 180, 133, 0.8), rgba(85, 197, 122, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /*Using background position as top crops down the image while we reduce the width of the browser. We can also use bottom, center etc.*/
  background-position: top;
  /*We use clip-path: polygon property to create the header element as a polygon shape.*/
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*So, we can position the logo with respect to this division. */
  position: relative; }
  @media (max-width: 37.5em) {
    .header {
      -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
      clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%); } }
  .header__logo-box {
    /*To set the logo back from its parent element, we set this property.(And we set the parent positioning to relative.) Using this method, we can position the logo with respect to its parent positions.*/
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    left: 50%;
    top: 40%;
    /* You can use transform-translate property after already defining its position to fix its position again. */
    transform: translate(-50%, -50%);
    text-align: center; }

.row {
  /*1. We have chosen max-width over width bcoz no matter how much size we reduce of google chrome, It'll always show a fixed width(max-width) of the row.*/
  max-width: 114rem;
  /*We can assign row(A block element) to the center position using this strategy*/
  margin: 0 auto;
  /*Every child except the last one*/
  /*2. Since, we are using float: left property, the height of the row collapses. So, we'll use this clearfix hack.*/ }
  .row:not(:last-child) {
    /*Here, We've defined horizontal gutter.*/
    margin-bottom: 8rem; }
    @media (max-width: 56.25em) {
      .row:not(:last-child) {
        margin-bottom: 6rem; } }
  @media (max-width: 56.25em) {
    .row {
      max-width: 50rem;
      padding: 0 3rem; } }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^='col-'] {
    float: left; }
    .row [class^='col-']:not(:last-child) {
      margin-right: 6rem; }
      @media (max-width: 56.25em) {
        .row [class^='col-']:not(:last-child) {
          margin-right: 0;
          margin-bottom: 6rem; } }
    @media (max-width: 56.25em) {
      .row [class^='col-'] {
        width: 100% !important; } }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc((2 * (100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc((3 * (100% - 3 * 6rem) / 4) + 6rem); }

.footer {
  background-color: #333;
  padding: 10rem 0;
  font-size: 1.4rem;
  color: #f7f7f7; }
  @media (max-width: 56.25em) {
    .footer {
      padding: 8rem 0; } }
  .footer__logo-box {
    text-align: center;
    margin-bottom: 8rem; }
    @media (max-width: 56.25em) {
      .footer__logo-box {
        margin-bottom: 5rem; } }
  .footer__logo {
    width: 15rem;
    height: auto; }
  .footer__navigation {
    border-top: 1px solid #eee;
    padding-top: 2rem;
    display: inline-block; }
    @media (max-width: 56.25em) {
      .footer__navigation {
        width: 100%;
        text-align: center; } }
  .footer__list {
    list-style: none; }
  .footer__item {
    display: inline-block; }
    .footer__item:not(:last-child) {
      margin-right: 1.5rem; }
  .footer__link:link, .footer__link:visited {
    color: #f7f7f7;
    background-color: #333;
    text-decoration: none;
    text-transform: uppercase;
    display: inline-block;
    transition: all 0.2s; }
  .footer__link:hover, .footer__link:active {
    color: #7ed56f;
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.4);
    transform: rotate(5deg) scale(1.3); }
  .footer__copyright {
    border-top: 1px solid #eee;
    padding-top: 2rem;
    width: 80%;
    float: right; }
    @media (max-width: 56.25em) {
      .footer__copyright {
        text-align: center;
        width: 100%;
        float: none; } }

.navigation__checkbox {
  display: none; }

.navigation__button {
  background-color: #fff;
  height: 7rem;
  width: 7rem;
  position: fixed;
  top: 6rem;
  right: 6rem;
  border-radius: 50%;
  z-index: 2000;
  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.1);
  text-align: center;
  cursor: pointer; }
  @media (max-width: 56.25em) {
    .navigation__button {
      top: 4rem;
      right: 4rem; } }
  @media (max-width: 37.5em) {
    .navigation__button {
      top: 2.5rem;
      right: 2.5rem; } }

.navigation__background {
  height: 6rem;
  width: 6rem;
  border-radius: 50%;
  position: fixed;
  top: 6.5rem;
  right: 6.5rem;
  background-image: radial-gradient(#28b485, #55c57a);
  z-index: 1000;
  transition: transform 0.8s cubic-bezier(0.45, 0, 0.55, 1); }
  @media (max-width: 56.25em) {
    .navigation__background {
      top: 4.5rem;
      right: 4.5rem; } }
  @media (max-width: 37.5em) {
    .navigation__background {
      top: 2.5rem;
      right: 2.5rem; } }

.navigation__nav {
  height: 100vh;
  width: 0;
  position: fixed;
  top: 0;
  right: 0;
  z-index: 1500;
  opacity: 0;
  transition: all 0.8s cubic-bezier(0.68, -0.6, 0.32, 1.6); }

.navigation__list {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  list-style: none;
  text-align: center; }

.navigation__item {
  margin: 1rem; }

.navigation__link:link, .navigation__link:visited {
  display: inline-block;
  font-size: 3rem;
  font-weight: 300;
  padding: 1rem 2rem;
  color: #fff;
  text-decoration: none;
  text-transform: uppercase;
  background-image: linear-gradient(120deg, transparent 0%, transparent 50%, #fff 50%);
  background-size: 220%;
  transition: all 0.4s; }

.navigation__link:hover, .navigation__link:active {
  background-position: 100%;
  color: #7ed56f;
  transform: translateX(1rem); }

.navigation__checkbox:checked ~ .navigation__background {
  transform: scale(80); }

.navigation__checkbox:checked ~ .navigation__nav {
  opacity: 1;
  width: 100%; }

.navigation__icon {
  position: relative;
  margin-top: 3.5rem; }
  .navigation__icon, .navigation__icon::before, .navigation__icon::after {
    width: 3rem;
    height: 2px;
    background-color: #333;
    display: inline-block; }
  .navigation__icon::before, .navigation__icon::after {
    content: "";
    position: absolute;
    left: 0;
    transition: all 0.2s; }
  .navigation__icon::before {
    top: -0.8rem; }
  .navigation__icon::after {
    top: 0.8rem; }

.navigation__button:hover .navigation__icon::before {
  top: -1.15rem; }

.navigation__button:hover .navigation__icon::after {
  top: 1.15rem; }

.navigation__checkbox:checked + .navigation__button .navigation__icon {
  background-color: transparent; }

.navigation__checkbox:checked + .navigation__button .navigation__icon::before {
  top: 0;
  transform: rotate(45deg); }

.navigation__checkbox:checked + .navigation__button .navigation__icon::after {
  top: 0;
  transform: rotate(-45deg); }
